const arr = [10, 12, 15, 21];
for(var i = 0; i< arr.length; i++) {
 setTimeout(function() {
   console.log(arr[i] > 13 ? `Good: ${arr[i]}` : `Bad: ${arr[i]}`)
 }, 3000)
}
/*
При таком исполнении кода, в консоль попадает только Bad: undefined  
Данный код выводит поочередно елементы массива, с задержкой в 3 секунды,
cама логика работает, так что если число больше 13 то это выводится Good: и само число, в случае если это условие не соблюдено, то Bad и само число.
У var функциональная область видимости,  поэтому первое решение , что мне приходит в голову это использрвание let.

const arr = [10, 12, 15, 21];
for(let i = 0; i< arr.length; i++) {
 setTimeout(function() {
   console.log(arr[i] > 13 ? `Good: ${arr[i]}` : `Bad: ${arr[i]}`)
 }, 3000)
}

и да все работает и вывод такой как нужно по заданию -  Bad: 10, Bad: 12, Good: 15, Good: 21

Второй вариант обернуть  в IFFEЭ

то есть мы каждый раз просто вызываем функцию когда идем по цилку и передаем как раз в аргмент iffe нашу i.
const arr = [10, 12, 15, 21];
for(var i = 0; i< arr.length; i++) {
 (function(index) {
   setTimeout(function() {
     console.log(arr[index] > 13 ? `Good: ${arr[index]}` : `Bad: ${arr[index]}`)
   }, 3000)
 })(i);
}

Вроде как это повышает сложность кода, точнее его понимания, покрайне мере для таких новичков как я.
*/